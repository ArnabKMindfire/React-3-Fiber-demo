/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/Arnab Kundu.glb -o src/components/ArnabKundu.jsx -r public 
*/

// Command for ruhbarb lip sync data: ./rhubarb -f json ../public/audios/myIntro.ogg -o myIntro.json

import React, { useEffect, useRef, useMemo, useState } from 'react';
import { useAnimations, useGLTF, useFBX } from '@react-three/drei';
import { useFrame, useGraph, useLoader } from '@react-three/fiber';
import { SkeletonUtils } from 'three-stdlib';
import { useControls } from 'leva';
import * as THREE from 'three';

const MOVEMENT_SPEED = 0.032;

const corresponding = {
	A: 'viseme_PP',
	B: 'viseme_kk',
	C: 'viseme_I',
	D: 'viseme_AA',
	E: 'viseme_O',
	F: 'viseme_U',
	G: 'viseme_FF',
	H: 'viseme_TH',
	X: 'viseme_PP',
};

export function ArnabKundu({
	hairColor = 'green',
	topColor = 'red',
	bottomColor = 'blue',
	footwearColor = 'black',
	allAnimations,
	allAudios,
	allLipSyncData,
	animationCommand = 'stand',
	...props
}) {
	const { playAudio, script } = useControls({
		playAudio: false,
		script: {
			value: 'myIntro',
			options: ['myIntro'],
		},
	});

	const audio = useMemo(() => {
		if (script === 'myIntro') {
			return new Audio(allAudios[0]);
		}
	}, [script]);
	const jsonFile = useLoader(THREE.FileLoader, allLipSyncData[0]);
	const lipSyncFile = JSON.parse(jsonFile);

	useEffect(() => {
		if (playAudio) {
			audio.currentTime = 0;
			audio.play();
		} else {
			Object.values(corresponding).forEach((value) => {
				nodes.Wolf3D_Head.morphTargetInfluences[
					nodes.Wolf3D_Head.morphTargetDictionary[value]
				] = 0;
				nodes.Wolf3D_Teeth.morphTargetInfluences[
					nodes.Wolf3D_Teeth.morphTargetDictionary[value]
				] = 0;
			});
			audio.pause();
		}
	}, [playAudio, script]);

	const position = useMemo(() => props.position, []);
	const group = useRef();
	const { scene, materials } = useGLTF('/models/Arnab Kundu.glb');

	const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
	const { nodes } = useGraph(clone);

	const { animations: standingAnimation } = useFBX(allAnimations[0]);
	const { animations: walkingAnimation } = useFBX(allAnimations[1]);
	const { animations: dancingAnimation } = useFBX(allAnimations[2]);
	const { animations: jumpingAnimation } = useFBX(allAnimations[3]);

	standingAnimation[0].name = 'Standing';
	walkingAnimation[0].name = 'Walking';
	dancingAnimation[0].name = 'Dancing';
	jumpingAnimation[0].name = 'Jumping';

	standingAnimation[0].tracks.forEach((track) => {
		track.name = track.name.replace('mixamorig', '');
	});

	walkingAnimation[0].tracks.forEach((track) => {
		track.name = track.name.replace('mixamorig', '');
	});

	dancingAnimation[0].tracks.forEach((track) => {
		track.name = track.name.replace('mixamorig', '');
	});

	jumpingAnimation[0].tracks.forEach((track) => {
		track.name = track.name.replace('mixamorig', '');
	});

	const { actions } = useAnimations(
		[
			standingAnimation[0],
			walkingAnimation[0],
			jumpingAnimation[0],
			dancingAnimation[0],
		],
		group
	);

	const getProperAnimationName = (animationType) => {
		switch (animationType) {
			case 'stand':
			case 'standing':
			case 'stand idle':
			case 'standing idle':
			case 'stop':
				return 'Standing';
			case 'walk':
			case 'walking':
				return 'Walking';
			case 'dance':
			case 'dancing':
				return 'Dancing';
			case 'jump':
			case 'jumping':
				return 'Jumping';
		}
	};

	const [animation, setAnimation] = useState(
		getProperAnimationName(animationCommand)
	);

	useEffect(() => {
		actions[animation].reset().fadeIn(0.5).play();
		return () => {
			actions[animation]?.fadeOut(0.5);
		};
	}, [animation]);

	useFrame(() => {
		if (playAudio) {
			const currentAudioTime = audio.currentTime;

			Object.values(corresponding).forEach((value) => {
				nodes.Wolf3D_Head.morphTargetInfluences[
					nodes.Wolf3D_Head.morphTargetDictionary[value]
				] = 0;
				nodes.Wolf3D_Teeth.morphTargetInfluences[
					nodes.Wolf3D_Teeth.morphTargetDictionary[value]
				] = 0;
			});

			for (let i = 0; i < lipSyncFile.mouthCues.length; i++) {
				const mouthCue = lipSyncFile.mouthCues[i];

				if (
					currentAudioTime >= mouthCue.start &&
					currentAudioTime <= mouthCue.end
				) {
					nodes.Wolf3D_Head.morphTargetInfluences[
						nodes.Wolf3D_Head.morphTargetDictionary[
							corresponding[mouthCue.value]
						]
					] = 1;
					nodes.Wolf3D_Teeth.morphTargetInfluences[
						nodes.Wolf3D_Teeth.morphTargetDictionary[
							corresponding[mouthCue.value]
						]
					] = 1;
					break;
				}
			}
		}

		if (group.current.position.distanceTo(props.position) > 0.1) {
			const direction = group.current.position
				.clone()
				.sub(props.position)
				.normalize()
				.multiplyScalar(MOVEMENT_SPEED);
			group.current.position.sub(direction);
			group.current.lookAt(props.position);
			setAnimation('Walking');
		} else {
			setAnimation(getProperAnimationName(animationCommand));
		}
	});

	return (
		<group {...props} position={position} ref={group} dispose={null}>
			<primitive object={nodes.Hips} />
			<skinnedMesh
				name='EyeLeft'
				geometry={nodes.EyeLeft.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeLeft.skeleton}
				morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
			/>
			<skinnedMesh
				name='EyeRight'
				geometry={nodes.EyeRight.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeRight.skeleton}
				morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
			/>

			<skinnedMesh
				name='Wolf3D_Head'
				geometry={nodes.Wolf3D_Head.geometry}
				material={materials.Wolf3D_Skin}
				skeleton={nodes.Wolf3D_Head.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
			/>
			<skinnedMesh
				name='Wolf3D_Teeth'
				geometry={nodes.Wolf3D_Teeth.geometry}
				material={materials.Wolf3D_Teeth}
				skeleton={nodes.Wolf3D_Teeth.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Hair.geometry}
				material={materials.Wolf3D_Hair}
				skeleton={nodes.Wolf3D_Hair.skeleton}
			>
				<meshStandardMaterial color={hairColor} />
			</skinnedMesh>
			<skinnedMesh
				geometry={nodes.Wolf3D_Glasses.geometry}
				material={materials.Wolf3D_Glasses}
				skeleton={nodes.Wolf3D_Glasses.skeleton}
			/>

			<skinnedMesh
				geometry={nodes.Wolf3D_Body.geometry}
				material={materials.Wolf3D_Body}
				skeleton={nodes.Wolf3D_Body.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
				material={materials.Wolf3D_Outfit_Bottom}
				skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
			>
				<meshStandardMaterial color={bottomColor} />
			</skinnedMesh>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
				material={materials.Wolf3D_Outfit_Footwear}
				skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
			>
				<meshStandardMaterial color={footwearColor} />
			</skinnedMesh>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Top.geometry}
				material={materials.Wolf3D_Outfit_Top}
				skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
			>
				<meshStandardMaterial color={topColor} />
			</skinnedMesh>
		</group>
	);
}

useGLTF.preload('/models/Arnab Kundu.glb');
